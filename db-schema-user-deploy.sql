/***************************************************************************************************
Demo:         Originally Horizon Labs Demo modified for use in Database Deployment for Roles
Version:      HLab v2 (modified)
Create Date:  Apr 17, 2024
Modified Date: March 8, 2025
Original Author:       Ravi Kumar
Original Reviewers:    Ben Weiss, Susan Devitt
Copyright(c): 2024 Snowflake Inc. All rights reserved.

URL: https://github.com/Snowflake-Labs/sfguide-getting-started-with-horizon-data-governance-in-snowflake/blob/main/0-lab-Setup.sql
****************************************************************************************************/
/****************************************************************************************************
SUMMARY OF CHANGES
Date(yyyy-mm-dd)    Author              Comments
------------------- ------------------- ------------------------------------------------------------
Apr 17, 2024        Ravi Kumar           Initial Lab
Mar 8, 2025         Luke Haakenson       Modified for Production Deployment without HRZN Naming
***************************************************************************************************/

--This creates a Medallion-like DB Architecture in combo with 'Horizon'-like setup
--Modify for your specific needs for role names, warehouses, grants, databases, schemas, and table initialization

--Create all Roles and assign to user
USE ROLE SECURITYADMIN;
CREATE OR REPLACE ROLE DATA_ENGINEER;
CREATE OR REPLACE ROLE DATA_GOVERNOR;
CREATE OR REPLACE ROLE DATA_USER;
--CREATE OR REPLACE ROLE ($PROJECTNAME)_IT_ADMIN; --Uncomment if you intend to use, otherwise use SecurityAdmin

GRANT ROLE DATA_ENGINEER TO ROLE SYSADMIN;
GRANT ROLE DATA_GOVERNOR TO ROLE SYSADMIN;
GRANT ROLE DATA_USER TO ROLE SYSADMIN;
--GRANT ROLE ($PROJECTNAME)_IT_ADMIN TO ROLE SYSADMIN; --Uncomment if you intend to use, otherwise use SecurityAdmin

SET MY_USER_ID  = CURRENT_USER();
SELECT ($MY_USER_ID);
GRANT ROLE DATA_ENGINEER TO USER identifier($MY_USER_ID);
GRANT ROLE DATA_GOVERNOR TO USER identifier($MY_USER_ID);
GRANT ROLE DATA_USER TO USER identifier($MY_USER_ID);
--GRANT ROLE ($PROJECTNAME)_IT_ADMIN TO USER identifier($MY_USER_ID); --Uncomment if you intend to use, otherwise use SecurityAdmin

--Create warehouse and provide grants
---Additional may want other WH's for clearly delineated use and functional use
USE ROLE SYSADMIN;
SET PROJECTNAME = 'PROJ'; --Abrev for project
SELECT ($PROJECTNAME);
CREATE OR REPLACE WAREHOUSE identifier($PROJECTNAME)_QUERY_WH WITH WAREHOUSE_SIZE='X-SMALL'; --for running queries
CREATE OR REPLACE WAREHOUSE identifier($PROJECTNAME)_LOADING_WH WITH WAREHOUSE_SIZE='X-SMALL'; --for ingesting data
CREATE OR REPLACE WAREHOUSE identifier($PROJECTNAME)_REPORTING_WH WITH WAREHOUSE_SIZE='X-SMALL'; --for connecting to BI tools
CREATE OR REPLACE WAREHOUSE identifier($PROJECTNAME)_TASK_WH WITH WAREHOUSE_SIZE='X-SMALL'; --use with tasks

GRANT USAGE ON WAREHOUSE identifier($PROJECTNAME)_LOADING_WH TO ROLE ($PROJECTNAME)_DATA_ENGINEER;
GRANT USAGE ON WAREHOUSE identifier($PROJECTNAME)_TASK_WH TO ROLE ($PROJECTNAME)_DATA_ENGINEER;
GRANT USAGE ON WAREHOUSE identifier($PROJECTNAME)_QUERY_WH TO ROLE ($PROJECTNAME)_DATA_ENGINEER;

GRANT USAGE ON WAREHOUSE identifier($PROJECTNAME)_QUERY_WH TO ROLE ($PROJECTNAME)_DATA_GOVERNOR;

GRANT USAGE ON WAREHOUSE identifier($PROJECTNAME)_REPORTING_WH TO ROLE ($PROJECTNAME)_DATA_USER;
GRANT USAGE ON WAREHOUSE identifier($PROJECTNAME)_QUERY_WH TO ROLE ($PROJECTNAME)_DATA_USER;
--GRANT USAGE ON WAREHOUSE ($PROJECTNAME)_WH TO ROLE ($PROJECTNAME)_IT_ADMIN; --Uncomment if you intend to use, otherwise use SecurityAdmin

--Create database, schemas and assign to appropriate roles

GRANT CREATE DATABASE ON ACCOUNT TO ROLE DATA_ENGINEER;

USE ROLE DATA_ENGINEER;
CREATE OR REPLACE DATABASE identifier($PROJECTNAME)_TEST_DB;--For Testing
CREATE OR REPLACE DATABASE identifier($PROJECTNAME)_ADMIN_DB; --Observation / DQ Layer
CREATE OR REPLACE DATABASE identifier($PROJECTNAME)_LANDING_DB; --Raw/Bronze Layer
CREATE OR REPLACE DATABASE identifier($PROJECTNAME)_CURATED_DB; --Silver Layer
CREATE OR REPLACE DATABASE identifier($PROJECTNAME)_ANALYTICS_DB; --Gold Layer
CREATE OR REPLACE SCHEMA identifier($PROJECTNAME)_TEST_DB.identifier($PROJECTNAME)_DATA_DEV;
CREATE OR REPLACE SCHEMA identifier($PROJECTNAME)_TEST_DB.identifier($PROJECTNAME)_PIPES;
CREATE OR REPLACE SCHEMA identifier($PROJECTNAME)_TEST_DB.identifier($PROJECTNAME)_FUNCTIONS;
CREATE OR REPLACE SCHEMA identifier($PROJECTNAME)_TEST_DB.identifier($PROJECTNAME)_INTERNAL_STAGES;
CREATE OR REPLACE SCHEMA identifier($PROJECTNAME)_TEST_DB.identifier($PROJECTNAME)_EXTERNAL_STAGES;
CREATE OR REPLACE SCHEMA identifier($PROJECTNAME)_TEST_DB.identifier($PROJECTNAME)_FILE_FORMATS;
---------
CREATE OR REPLACE SCHEMA identifier($PROJECTNAME)_ADMIN_DB.identifier($PROJECTNAME)_SCH;
---------
CREATE OR REPLACE SCHEMA identifier($PROJECTNAME)_LANDING_DB.identifier($PROJECTNAME)_DATA_SRC;
CREATE OR REPLACE SCHEMA identifier($PROJECTNAME)_LANDING_DB.identifier($PROJECTNAME)_PIPES;
CREATE OR REPLACE SCHEMA identifier($PROJECTNAME)_LANDING_DB.identifier($PROJECTNAME)_FUNCTIONS;
CREATE OR REPLACE SCHEMA identifier($PROJECTNAME)_LANDING_DB.identifier($PROJECTNAME)_FILE_FORMATS;
CREATE OR REPLACE SCHEMA identifier($PROJECTNAME)_LANDING_DB.identifier($PROJECTNAME)_INTERNAL_STAGES;
CREATE OR REPLACE SCHEMA identifier($PROJECTNAME)_LANDING_DB.identifier($PROJECTNAME)_EXTERNAL_STAGES;
CREATE OR REPLACE SCHEMA identifier($PROJECTNAME)_LANDING_DB.identifier($PROJECTNAME)_FILE_FORMATS;
---------
CREATE OR REPLACE SCHEMA identifier($PROJECTNAME)_LANDING_DB.identifier($PROJECTNAME)_DATA_TGT;


GRANT USAGE ON DATABASE identifier($PROJECTNAME)_ADMIN_DB TO ROLE DATA_GOVERNOR;
GRANT USAGE ON DATABASE identifier($PROJECTNAME)_TESTING_DB TO ROLE DATA_GOVERNOR;
GRANT USAGE ON DATABASE identifier($PROJECTNAME)_LANDING_DB TO ROLE DATA_GOVERNOR;
GRANT USAGE ON DATABASE identifier($PROJECTNAME)_CURATED_DB TO ROLE DATA_GOVERNOR;
GRANT USAGE ON DATABASE identifier($PROJECTNAME)_ANLAYTICS_DB TO ROLE DATA_GOVERNOR;

GRANT USAGE ON SCHEMA identifier($PROJECTNAME)_ADMIN_DB.identifier($PROJECTNAME)_SCH TO ROLE DATA_GOVERNOR;
GRANT USAGE ON SCHEMA identifier($PROJECTNAME)_TESTING_DB.identifier($PROJECTNAME)_DATA_DEV TO ROLE DATA_GOVERNOR;
GRANT USAGE ON SCHEMA identifier($PROJECTNAME)_LANDING_DB.identifier($PROJECTNAME)_DATA_SRC TO ROLE DATA_GOVERNOR;
GRANT CREATE SCHEMA ON DATABASE identifier($PROJECTNAME)_TEST_DB TO ROLE DATA_GOVERNOR;
GRANT CREATE SCHEMA ON DATABASE identifier($PROJECTNAME)_ADMIN_DB TO ROLE DATA_GOVERNOR;
GRANT CREATE SCHEMA ON DATABASE identifier($PROJECTNAME)_LANDING_DB TO ROLE DATA_GOVERNOR;
GRANT CREATE SCHEMA ON DATABASE identifier($PROJECTNAME)_CURATED_DB TO ROLE DATA_GOVERNOR;
GRANT CREATE SCHEMA ON DATABASE identifier($PROJECTNAME)_ANALYTICS_DB TO ROLE DATA_GOVERNOR;

GRANT USAGE ON ALL SCHEMAS IN DATABASE identifier($PROJECTNAME)_TEST_DB TO ROLE DATA_GOVERNOR;
GRANT USAGE ON ALL SCHEMAS IN DATABASE identifier($PROJECTNAME)_ADMIN_DB TO ROLE DATA_GOVERNOR;
GRANT USAGE ON ALL SCHEMAS IN DATABASE identifier($PROJECTNAME)_LANDING_DB TO ROLE DATA_GOVERNOR;
GRANT USAGE ON ALL SCHEMAS IN DATABASE identifier($PROJECTNAME)_CURATED_DB TO ROLE DATA_GOVERNOR;
GRANT USAGE ON ALL SCHEMAS IN DATABASE identifier($PROJECTNAME)_ANALYTICS_DB TO ROLE DATA_GOVERNOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN DATABASE identifier($PROJECTNAME)_TEST_DB TO ROLE DATA_GOVERNOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN DATABASE identifier($PROJECTNAME)_ADMIN_DB TO ROLE DATA_GOVERNOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN DATABASE identifier($PROJECTNAME)_LANDING_DB TO ROLE DATA_GOVERNOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN DATABASE identifier($PROJECTNAME)_CURATED_DB TO ROLE DATA_GOVERNOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN DATABASE identifier($PROJECTNAME)_ANALYTICS_DB TO ROLE DATA_GOVERNOR;

GRANT SELECT ON ALL TABLES IN SCHEMA identifier($PROJECTNAME)_TEST_DB.HRZN_SCH TO ROLE DATA_GOVERNOR;
GRANT SELECT ON ALL VIEWS IN SCHEMA identifier($PROJECTNAME)_DB.HRZN_SCH TO ROLE DATA_GOVERNOR;

--GRANT USAGE ON DATABASE identifier($PROJECTNAME)_TEST_DB TO ROLE IT_ADMIN;
--GRANT USAGE ON SCHEMA identifier($PROJECTNAME)_TEST_DB.HRZN_SCH TO ROLE IT_ADMIN;
--GRANT CREATE SCHEMA ON DATABASE identifier($PROJECTNAME)_TEST_DB TO ROLE IT_ADMIN;

GRANT USAGE ON DATABASE identifier($PROJECTNAME)_ANALYTICS_DB TO ROLE DATA_USER;
GRANT USAGE ON SCHEMA identifier($PROJECTNAME)_ANALYTICS_DB.identifier($PROJECTNAME)_DATA_TGT TO ROLE DATA_USER;
GRANT USAGE ON ALL SCHEMAS IN DATABASE identifier($PROJECTNAME)_ANALYTICS_DB TO ROLE DATA_USER;
GRANT SELECT ON ALL TABLES IN DATABASE identifier($PROJECTNAME)_ANALYTICS_DB TO ROLE DATA_USER;

USE ROLE DATA_GOVERNOR;

-- Create a  Schema to contain classifiers
CREATE OR REPLACE SCHEMA identifier($PROJECTNAME)_ADMIN_DB.CLASSIFIERS
COMMENT = 'Schema containing Classifiers';

-- Create a Schema to contain Tags
CREATE OR REPLACE SCHEMA identifier($PROJECTNAME)_ADMIN_DB.TAG_SCHEMA
COMMENT = 'Schema containing Tags';

CREATE OR REPLACE TABLE identifier($PROJECTNAME)_ADMIN_DB.TAG_SCHEMA.ROW_POLICY_MAP
    (role STRING, state_visibility STRING);

-- with the table in place, we will now INSERT the relevant Role to City Permissions mapping to ensure
-- our Test only can see Massachusetts customers (EXAMPLE, Replace as needed)
INSERT INTO identifier($PROJECTNAME)_ADMIN_DB.TAG_SCHEMA.ROW_POLICY_MAP
    VALUES ('DATA_USER','MA'); 

    
-- Create a Schema to contain Security Policies
CREATE OR REPLACE SCHEMA identifier($PROJECTNAME)_ADMIN_DB.SEC_POLICIES_SCHEMA
COMMENT = 'Schema containing Security Policies';

USE ROLE SECURITYADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON FUTURE TABLES IN SCHEMA identifier($PROJECTNAME)_TEST_DB.identifier($PROJECTNAME)_DATA_DEV TO ROLE DATA_GOVERNOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON FUTURE TABLES IN DATABASE identifier($PROJECTNAME)_TEST_DB TO ROLE DATA_GOVERNOR;

GRANT SELECT ON FUTURE TABLES IN SCHEMA identifier($PROJECTNAME)_ANALYTICS_DB.identifier($PROJECTNAME)_DATA_TGT TO ROLE DATA_USER;
GRANT SELECT ON FUTURE TABLES IN DATABASE identifier($PROJECTNAME)_ANALYTICS_DB TO ROLE DATA_USER;

--GRANT SELECT ON FUTURE TABLES IN SCHEMA identifier($PROJECTNAME)_ANALYTICS_DB.identifier($PROJECTNAME)_DATA_DEV TO ROLE IT_ADMIN;
--GRANT SELECT ON FUTURE TABLES IN DATABASE identifier($PROJECTNAME)_ANALYTICS_DB TO ROLE IT_ADMIN;

--GRANT USAGE ON ALL SCHEMAS IN DATABASE identifier($PROJECTNAME)_DB TO ROLE IT_ADMIN;
--GRANT SELECT ON ALL VIEWS IN DATABASE identifier($PROJECTNAME)_DB TO ROLE IT_ADMIN;
--GRANT SELECT ON ALL TABLES IN SCHEMA identifier($PROJECTNAME)_DB.SCH TO ROLE IT_ADMIN;
--GRANT SELECT ON ALL VIEWS IN SCHEMA identifier($PROJECTNAME)_DB.SCH TO ROLE IT_ADMIN;
----Took out (----GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN DATABASE identifier($PROJECTNAME)_DB TO ROLE IT_ADMIN;)
----IT Admin should only have view access (Analyze Access, Analyze Roles)

--
USE ROLE ACCOUNTADMIN;
GRANT DATABASE ROLE SNOWFLAKE.DATA_METRIC_USER TO ROLE DATA_ENGINEER;
GRANT EXECUTE DATA METRIC FUNCTION ON ACCOUNT TO ROLE DATA_ENGINEER;
GRANT APPLICATION ROLE SNOWFLAKE.DATA_QUALITY_MONITORING_VIEWER TO ROLE DATA_ENGINEER;

GRANT DATABASE ROLE SNOWFLAKE.GOVERNANCE_VIEWER TO ROLE DATA_GOVERNOR;
GRANT DATABASE ROLE SNOWFLAKE.OBJECT_VIEWER TO ROLE DATA_GOVERNOR;
GRANT DATABASE ROLE SNOWFLAKE.USAGE_VIEWER TO ROLE DATA_GOVERNOR;
GRANT DATABASE ROLE SNOWFLAKE.DATA_METRIC_USER TO ROLE DATA_GOVERNOR;
GRANT EXECUTE DATA METRIC FUNCTION ON ACCOUNT TO ROLE DATA_GOVERNOR;
GRANT APPLICATION ROLE SNOWFLAKE.DATA_QUALITY_MONITORING_VIEWER TO ROLE DATA_GOVERNOR;

--GRANT DATABASE ROLE SNOWFLAKE.GOVERNANCE_VIEWER TO ROLE IT_ADMIN;
--GRANT DATABASE ROLE SNOWFLAKE.OBJECT_VIEWER TO ROLE IT_ADMIN;
--GRANT DATABASE ROLE SNOWFLAKE.USAGE_VIEWER TO ROLE IT_ADMIN;
--GRANT DATABASE ROLE SNOWFLAKE.DATA_METRIC_USER TO ROLE IT_ADMIN;
--GRANT EXECUTE DATA METRIC FUNCTION ON ACCOUNT TO ROLE IT_ADMIN;
--GRANT APPLICATION ROLE SNOWFLAKE.DATA_QUALITY_MONITORING_VIEWER TO ROLE IT_ADMIN;
